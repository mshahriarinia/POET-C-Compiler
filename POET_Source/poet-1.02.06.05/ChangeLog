. Added support for inherited attribute (macro INHERIT) in parsing, which
  contains the previous AST being built.
. Added keyword NONE which specifies no parsing for a code template
Feb 8,09: Changed syntax of nested input annotations to require the same 
    specification in both BEGIN and END. Removed the pair of {} surrounding
    assignments in the => operator.
. Add support for configuration of pattern matching for code templates.
  : added the "match" attribute in code template declarations to specify
    a routine to invoke when comparing the arguments of code templates in pattern matching.
. modified TranslatorDriver.pt and code in example directory. Moved TranslatorDriver to lib directory.
  simplified ways to write translators (using TranslatorDriver.pt)
. Allow using CODE.name and XFORM.name to avoid forward decl of code/xform 
.Added configuration macro PREP to replace the original PARSE,
  use PARSE to specify the goal of parsing.
  PREP specifies a filter for lexical analyzer.
  PARSE specifies GOAL,
  UNPARSE specifies output
  PREP specifies TOKEN filter
  TOKEN specifies tokenizer.
.Improved the handling of macro definitions. Used global macros in defining 
  optional parameters of xform routines.
.Fixed the case of CONTINUE within FOREACH causing match to always return true.
.Fixed error reporting when output file name is empty (should output to stdout).
.when parse = "" in a code template def., only pattern matching is done in parsing
.Added the keyword RANGE which can be used to define a range value type.
==== poet.1.02.03 Oct 28, 2008
. Oct 28: fixed incorrect error reporting when xform parameters are used access maps.
. Oct 15: fixed the resetting of syntax definitions for code templates that do not have bodies.
====================
poet1.02.02 Qing Yi Oct 13 2008.
. Oct 13: fixed premature termination in parsing of lists
. Oct 7: fixed null pointer dereference when both components of a list are empty
. Oct 2: fixed reseting of trace variables when loops broken out (break/cont).
. Oct 2: fixed some syntax definitions in CFront.code 
. Oct 2: fixed the bug that modifies xform handles when they are invoked.. 
. Oct 2: changed/added formatting of AST in PRINT.
. Oct 1: allow global macro names to be multiply-defined 
. Sep 30: fixed lib/Loops.incl:TraceNest so that "car tNests" is not applied if tNest is a tracing variable (that may have previous values).
========================
poet1.02.01 Qing Yi  Sep 2008
. Aug 27 change INSERT operator to insert trace handles
. Aug 25 changed syntax for parameters and parsing. Added TOKEN configuration
. Aug 22: INT and STRING no longer serve type conversion. needs to use "=>"
       Change the syntax of parse to remove variable annot syntax and use assignment
. Aug 13: added output configuration to code templates
. Aug 8: added PARSE and UNPARSE configuration
. July 26: for input, allow reading poet files by setting type = POET
. July23: changed output/input syntax to 
    < output syntax=? from=? to=?/>
    < input syntax=? to=? debug=? type=?  from=?/>
. July 22: changed parseType specification. 
     To specify a tuple type, do TUPLE(elem1Type, elem2Type,...,elemmType).
     To specify a list type, do LIST(elemType, sep-string).
     Except for code template parameters, the syntax (type1,type2,...) as a list of alternative
    types(values) is no longer acceptable.
. June 30: changed syntax for input declaration
. June 30: Added the :: operator for lists
. June 29: Added the optional config integer for DEBUG.
           config > 0 : the level of function calls to debug (aside stmts);
           config > 10: debug AST matching
. June 29: changed the construction of lists to end with a NULL list.
. June 29: added the "eval" global declaration
. May 16: added DEBUG operator
. May 15: added BREAK, CONTINUE, and RETURN support
. May 11: tightened syntax for built-in operator invocations. 
          overloaded operators require using () to surround arguments;
          TRACE,UNTRACE,SPLIT,DUPLICATE are no longer overloaded.
          SAVE and RESTORE now process a single nested trace handle
. May 6: removed :: operator. tightened syntax parsing for config of xform
. May 4: changed parsing syntax definitions in poet_yacc.y s.t.
       1.  the //@ annot applies to a single line only.
       2.  The type or operator "|" is used to specify type definitions.
. Apr 22: added operator "|" which stands for alternative type specifications;
          used "|" to replace the overloaded "||" operator in types.
. Apr 12: modified OP_LEN to return the length of constant strings
. Mar 26: modified poet_yacc.y to allow {} to denote empty stmt
   manual==>  modified poet_lex.l to allow @@ be used to adjust starting alignment in code template defs 
             (examples in commands/test2.pt)
. Mar 24, modified lib/Cfront.code to incorporate more syntax info for functionDefn, Nest, etc.
. Mar 24, modified poet_yacc.y to 
     . fixed problems in defining input without syntax annotations
. Mar 24, modified driver.cpp to fix the error reporting when processing "include"
. Mar 18, modified parse.cpp to fix the case of matching STRING with empty.
. Feb 26, added support for strings that contain "\\n".
====================
poet1.01  Aug 13, 2007   Qing  Yi
. Added transformations: ShiftLoop, ScaleLoop, ValueRepl.
. Updated comments for each transformation in opt.pi.
. Splitted opt.pt into two files: opt.pt and utils.pt. 
. Fixed CodeReplOperator to allow identity replacement in specifications.
. Added command-line options
. Added many more extensions
=====================
poet1.0  Jun 10, 2007   Qing  Yi
The existing library can successfully optimize gemm, gemv (Transpose and Non-transpose)
and ger routines from ATLAS library. The POET opt.pt/pi library uses header files
from the ATLAS package and were tested and timed using ATLAS testers and timers.
The header files will be included as part of POET once POET can automatically generate
testers and timers for these routines.

The syntax of the POET language should be relatively stable now. A stable release
should be available once the language manual is developed.
