
POET is a dynamic scripting language designed to apply transformations 
to source code written in an arbitrary programming language. 
POET was originally designed for the purpose of parameterizing 
performance optimizations so that the optimized code may be 
empirically tuned to attain the best performance on a wide 
variety of different HPC platforms. The use of POET, however, 
is not limited to code optimizations. You can use POET to easily 
read in any structured input, extract information from 
or apply transformations to the input,  and then output the result. 
Check other tutorials  for existing examples and applications 
for the POET language.  If you are a new user of the POET language,
please send us a brief description of your project and what roles
POET has played in your project. We appreciate your input and any
feedback you may have in the design and implementation of POET.
The POET language was designed and implemented by Dr. Qing Yi
at the University of Texas at San Antonio.  All questions and 
feedbacks should be directed to her at qingyi@cs.utsa.edu. 

The current release of POET includes five directories: src, lib, doc, test, 
and examples. The $src$ directory contains C/C++/Yacc/Lex code for the POET 
language interpreter; the $lib$ directory contains the existing POET libraries 
that include an extensive collection of language descriptions and program 
transformation routines useful both for software optimization and evolution;
the $doc$ directory contains documentations about the POET language;
the $test$  directory contains some example applications of the POET code; 
and the $examples$ directory contains some stand-alone POET code that 
serve as examples in POET tutorials. 

Qing Yi
