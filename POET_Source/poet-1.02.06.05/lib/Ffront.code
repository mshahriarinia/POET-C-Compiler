include ExpStmt.incl
include Loops.incl
include omp.incl

<*
   POET : Parameterized Optimizations for Empirical Tuning
   Copyright (c)  2008,  Qing Yi.  All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 3. Neither the name of UTSA nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific
    prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISEDOF THE POSSIBILITY OF SUCH DAMAGE.
*>

<*****************************************************
 syntax descriptions for the Fortran language
******************************************************>

<define KEYWORDS ("return" "enddo" "do" "if" "dimension" "implicit" "double" "precision" "integer")/>
<define BACKTRACK FALSE/>
<define PARSE NoParse/>
<define UNPARSE UnparseLine[start_col=7;label_col=2; cont_col=6;text_len=66;is_omp=1]/>
<define PREP ParseLine[comment_col=1;continue_col=6;text_len=66] />

<code continue match="continue"|"CONTINUE" parse="continue"|"CONTINUE"> continue </code>
<code do match="DO"|"do" parse="DO"|"do"> do </code> 

<code D0FLOAT pars=(val:CODE.FLOAT,pre:"D0"|"")
        rebuild=((pre=="")?val:D0FLOAT#(val,pre))> @val pre@ </code>

<define TOKEN (CODE.FLOAT)/>

<define EXP_BASE INT|D0FLOAT|Name />
<define EXP_BOP ("=" ("+" "-") ("*" "/") ) />
<define EXP_UOP ("+" "-") />
<define PARSE_CALL CODE.ArrayAccess/>

<*********************>
<***** These code templates are used to build AST *>
<*********************>

<code MIN pars=(first,second)>
min(@first@,@second@)
</code>
<code MAX pars=(first,second)>
max(@first@,@second@)
</code>

<code ArrayAccess pars=(array:EXP,subscript:ExpList)>
@array@(@subscript@)
</code>

<code Loop pars=( i:ID, start:EXP, stop:EXP, step:EXP)>
@CODE.do@ @i@=@start@, @stop@, @step@
</code>

<code If pars=(condition)>
if (@condition@) then
</code>

<code NestLoop pars=(ctrl:Loop, body:StmtList)>
@ctrl@
@body@
enddo
</code>

<code NestDummyLoop pars=(ctrl:DummyLoop, body:StmtList)>
@body@
</code>

<code NestIf pars=(ctrl:CODE.UnrollLoopCheck|CODE.If, body:StmtList)>
@ctrl@
@body@
endif
</code>

<code Nest pars=(ctrl, body:StmtList)>
@ switch (ctrl) {
  case CODE.Loop:       NestLoop#(ctrl, body)
  case CODE.DummyLoop:  NestDummyLoop#(ctrl, body)
  case CODE.UnrollLoopCheck|CODE.If: NestIf#(ctrl, body)
}@
</code>

<code Assign pars=(lhs:EXP, rhs:EXP) >
@lhs@ = @rhs@
</code>

<code ExpStmt pars=(exp:EXP)
    rebuild=( (exp: Bop#("=",lhs,rhs))? Assign#(lhs,rhs) : ExpStmt#exp)
> @exp@

</code>

<code CallStmt pars=(func)>
call @func@
</code>

<code Label pars=(val:INT) >
@val@ @CODE.continue@

</code>


<code SingleLoop pars=(content:CODE.LabelNest|"") >
@content@

</code>


<code LoopNestList2 parse=LIST(CODE.LabelNest|CODE.Label,"\n")/>
<code LoopNestList pars=(content:LoopNestList2)>
@content@

</code>

<*********************>
<***** These code templates are used for parsing Fortran code *>
<*********************>

<code Type2 pars=(type : Name, len : INT) >
@type@*@len@
</code>

<code LoopStep pars=(val: ("," EXP)|"")
         rebuild=((val=="")?1:cdr(val)) > @val@ </code>


<code LabelLoop pars=(i:ID,start:EXP, stop:EXP, step:LoopStep, label : INT|"")>
@CODE.do@ @label@ @i@=@start@, @stop@ @step@
</code>

<xform ParseLoopBody pars=(input) output=(_res,_left) loop="">
label = loop[LabelLoop.label];
if (label == "") stop="enddo";
else stop=loop[LabelLoop.label];
(res,left) = ParseList[code=CODE.Stmt;stop=stop](input);
stopToken = FirstToken(left);
if (!(stopToken : stop)) {
   ERROR("Unexpected stopping token:" stopToken "; expecting:" stop);
}
left2=NextToken(left);
if (stop== "enddo") { left=left2; }
else {
   next = FirstToken(left2);
   if (!(next : CODE.continue)) { <<* QY: include stmt as part of loop body
      left2 => (next=CODE.Stmt,left2=_);
      res=BuildList(res,next);
      left = "\n"::stop::"continue"::"\n"::left2;
   }
}
(res,left)
</xform>

<code LabelLoopBody loop=INHERIT parse=ParseLoopBody[loop=loop] />

<code LabelNest pars=(loop:LabelLoop, body:LabelLoopBody)
      rebuild=(LabelLoop#(i,start,stop,step,_)=loop;
               CODE.Nest#(Loop#(i,start,stop,step), body)) >
@loop@
  @body@
</code>

<code Stmt parse=CODE.Label|CODE.LabelNest|CODE.ExpStmt|CODE.DeclStmt />

<code BlockLoopTileEnd pars=(bloop, no_mod)>
@ if (bloop : DummyLoop#(_,start,stop,step))
       bvar = start;
  else Loop#(bvar, _,stop,step) = bloop;
  min=(step < 0)? MAX : MIN;
  (no_mod)? min#(stop, bvar + step-1) : min#(stop-bvar, step-1)@
</code>

<*********************************** Types ************************************>

<code Type pars=(content: CODE.IntegerType
                        | CODE.DoubleType
                        | CODE.Name)>
@content@
</code>

<code IntegerType>integer</code>
<code DoubleType>double precision</code>

<code IntType pars=(name:"int")>@ (name=="int")? IntegerType : name @</code>
<code FloatType pars=(name:"double")>@ (name=="double")? DoubleType : name @</code>

<******************************* Identifiers **********************************>

<code Variable pars=(content:Name)>
@content@
</code>

<code VariableList parse=LIST(Variable,",") />

<code VariableListStmt pars=(content:VariableList) rebuild=content>
@content@

</code>

<******************************* Declarations *********************************>

<code DeclStmt pars=(content:CODE.ImplicitDeclStmt
                           | CODE.ParamDeclStmt
                           | CODE.VarDeclStmt)>
@content@
</code>

<code ParamDeclStmt
      pars=(keyword:"PARAMETER"|"parameter", vars:ExpList)>
@keyword@ (@vars@)

</code>

<code ImplicitDeclStmt
      pars=(keyword:"IMPLICIT"|"implicit", type:Name, ids:EXP)>
@keyword@ @type@ (@ids@)

</code>

<code VarDeclStmt
      pars=(type:Type, var:VariableListStmt) typeInfo="" >
@type@ @var@
</code>

<***************************** OMP Instructions *******************************>

<* \a private and \a shared are list of variable names *>
<code OMPParallelDo>
!$omp@@parallel do

</code>

<code OMPContinue pars=(content)>
!$omp^@content@

</code>

<code PrivateNameList pars=(vars:NameList)>
private(@vars@)
</code>

<code SharedNameList pars=(vars:NameList)>
shared(@vars@)
</code>

<* Variables are seperated into lines to avoid going beyond limited columns. *>
<code OMPParallelBegin pars=(private, shared)>
@ ret=OMPParallelDo;
for (rest=private; rest; rest=cdr rest)
  ret=BuildList(OMPContinue#(PrivateNameList#(car rest)), ret);
for (rest=shared; rest; rest=cdr rest)
  ret=BuildList(OMPContinue#(SharedNameList#(car rest)), ret);
ReverseList(ret) @
</code>

<code OMPParallelEnd>
!$omp end parallel do

</code>

<code OMPDecl pars=(id:ID, type:ID) >
 @type@ @id@

</code>


<code OMPSetNested pars=(num:EXP) >
!$ call omp_set_nested(@num@)

</code>

<code OMPSetNumThreads pars=(num:EXP)>
!$ call omp_set_num_threads(@num@)

</code>

<code OMPSetSchedule pars=(schedule:EXP, num:EXP) >
!$ call omp_set_schedule(@schedule@, @num@)

</code>


<***************************** PAPI Instructions ******************************>
<code PAPIIncl>

include "f90papi.h"

</code>

<code PAPIDecl>

INTEGER counters(4), ncounters, chkflg
INTEGER*8 values(4)
DOUBLE PRECISION t1, t2, OMP_GET_WTIME
EXTERNAL OMP_GET_THREAD_NUM

</code>

<code PAPIInit pars=(counters:NameList)>

chkflg = PAPI_VER_CURRENT 
call PAPIF_library_init(chkflg)
if (chkflg .ne. PAPI_VER_CURRENT) then
Write(0, *) 'Error PAPI Library init fail', PAPI_VER_CURRENT
call abort
end if
call PAPIF_thread_init(omp_get_thread_num, error)
if(error .ne. PAPI_OK) then
Write(0, *) 'PAPI with OpenMP fails'
call abort
end if
counters(1) = @car(counters)@;
counters(2) = @car(cdr(counters))@;
counters(3) = @car(cdr(cdr(counters)))@;
counters(4) = @car(cdr(cdr(cdr(counters))))@;

ncounters = @LEN(counters)@;
call PAPIF_START_COUNTERS(counters, ncounters, chkflg)
t1 = OMP_GET_WTIME()

</code>

<code PAPIFinalize pars=(counters:NameList)>

t2 = OMP_GET_WTIME()
call PAPIF_STOP_COUNTERS(values, ncounters, chkflg);
WRITE(0,*) "TIME : ", t2-t1, "seconds"
WRITE(0,*) "@car(counters)@ : ", values(1)
WRITE(0,*) "@car(cdr(counters))@ : ", values(2)
WRITE(0,*) "@car(cdr(cdr(counters)))@ : ", values(3)
WRITE(0,*) "@car(cdr(cdr(cdr(counters))))@ : ", values(4)

</code>

<**************************** Fortran Instructions ****************************>

<define INCLUDE CODE.Include />

<code SystemHeaders pars=(file:STRING)>
<@file@>
</code>

<code UserHeaders pars=(file:STRING)>
"@file@"
</code>

<code Headers pars=(content:SystemHeaders|UserHeaders|STRING)>
@content@
</code>

<code Include pars=(content:Headers)>
include @content@
</code>

<****************************** OpenMP Adaptors *******************************>

<code OMP_MACRO pars=(content:OMP_INST) rebuild=(XFORM.RebuildOMPMacro(content))>
!$omp @content@
</code>

<code OMPMacroCont pars=(content:UnknownUntilEOL)>
!$omp^ @content@

</code>

<xform RebuildOMPMacro pars=(input)>
<<* jichi (4/30/2010): Rebuild macro to prevent Fortran from columns overflow.
switch(input) {
case OMPParallelLoop#(content):
  BuildList(OMPMacro#(OMPParallelLoop#(Nothing)),
            RebuildOMPMacro(content))
case OMPParallelSection#(content):
  BuildList(OMPMacro#(OMPParallelSection#(Nothing)),
            RebuildOMPMacro(content))
case OMPAttrList#(attr):
  ret = "";
  foreach (attr : (shared = OMPSharedNameList) : TRUE)
    ret = BuildList(RebuildOMPMacro(shared), ret);
  foreach (attr : (private = OMPPrivateNameList) : TRUE)
    ret = BuildList(RebuildOMPMacro(private), ret);
  foreach (attr : (reduction = OMPReductionNameList) : TRUE)
    ret = BuildList(RebuildOMPMacro(reduction), ret);
  foreach (attr : (schedule = OMPSchedule) : TRUE)
    ret = BuildList(OMPMacroCont#(schedule), ret);
  foreach (attr : (threads = OMPNumThreads) : TRUE)
    ret = BuildList(OMPMacroCont#(threads), ret);
  ret

case OMPSharedNameList#(vars):
  (!(vars:NameList#(l)))? OMPMacroCont#(OMPSharedNameList#(vars))
  : (
    ret = "";
    for (rest = l; rest; rest = cdr rest)
      ret = BuildList(OMPMacroCont#(OMPSharedNameList#(car rest)),
                      ret);
    ret
  )

case OMPPrivateNameList#(vars):
  (!(vars:NameList#(l)))? OMPMacroCont#(OMPPrivateNameList#(vars))
  : (
    ret = "";
    for (rest = l; rest; rest = cdr rest)
      ret = BuildList(OMPMacroCont#(OMPPrivateNameList#(car rest)),
                      ret);
    ret
  )

case OMPReductionNameList#(op, vars):
  (!(vars:NameList#(l)))? OMPMacroCont#(OMPReductionNameList#(op, vars))
  : (
    ret = "";
    for (rest = l; rest; rest = cdr rest)
      ret = BuildList(OMPMacroCont#(OMPReductionNameList#(op, car rest)),
                      ret);
    ret
  )

default: PRINT(input); ERROR("unknown input type");
}
</xform>
