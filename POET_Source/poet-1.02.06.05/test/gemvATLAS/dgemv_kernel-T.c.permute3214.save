#include <atlas_prefetch.h>

#ifdef BETA0
#define SSE2
#include <SSE3Dnow.h>
#include <stdlib.h>
void ATL_dgemvT_a1_x1_b0_y1(const int M,const int N,const double alpha,const double* A,const int lda,const double* X,const int incX,const double beta,double* Y,const int incY) 
{
   int i,j;
   double _x_buf_0;
   double _a_buf_0_0;
   double _a_buf_1_0;
   double _y_buf_0;
   double _y_buf_1;
   size_t alignA;
   const double* _pA_0;
   const double* _pA_1;
   const double* _pA_0_0;
   const double* _pA_1_0;
   const double* _pX_0;
   double* _pY_0;
   const double * _prefA_0;
   const double * _prefA_0_0;
   _pA_0 = A;
   _pA_1 = _pA_0+lda;
   _pY_0 = Y;
   _prefA_0 = A+2*lda;
   for (i=0; i<-1+M; i+=2) 
     {
        vec_zero(reg3);
        vec_zero(reg4);
        alignA = (8 - (((size_t)(_pA_0)) & 0xF) / 8) ;
        for (j=0; j<alignA; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg0);
             vec_mov_mr_1(_pA_1+j,reg1);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
          }
        _pA_0_0 = _pA_0+alignA;
        _pA_1_0 = _pA_1+alignA;
        _pX_0 = X+alignA;
        _prefA_0_0 = _prefA_0;
        for (j=alignA; j<-7+N; j+=8) 
          {
             ATL_pfl1R(_prefA_0_0);
             _prefA_0_0 = 8+_prefA_0_0;
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mov_mr(_pA_1_0,reg1);
             vec_mov_mr(_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(2+_pA_0_0,reg0);
             vec_mov_mr(2+_pA_1_0,reg1);
             vec_mov_mr(2+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(2+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(4+_pA_0_0,reg0);
             vec_mov_mr(4+_pA_1_0,reg1);
             vec_mov_mr(4+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(4+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(6+_pA_0_0,reg0);
             vec_mov_mr(6+_pA_1_0,reg1);
             vec_mov_mr(6+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(6+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             _pA_0_0 = _pA_0_0+8;
             _pA_1_0 = _pA_1_0+8;
             _pX_0 = _pX_0+8;
          }
        for (j=j; j<N; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg0);
             vec_mov_mr_1(_pA_1+j,reg1);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
          }
        vec_red(reg3,reg5);
        vec_mov_rm_1(reg3,_pY_0);
        vec_red(reg4,reg5);
        vec_mov_rm_1(reg4,1+_pY_0);
        _pA_0 = _pA_1+lda;
        _pA_1 = _pA_0+lda;
        _pY_0 = _pY_0+2;
        _prefA_0 = _prefA_0+2*lda;
     }
   for (i=i; i<M; i+=1) 
     {
        Y[i] = 0;
        for (j=0; j<N; j+=1) 
          {
             _x_buf_0 = X[j];
             Y[i] = Y[i]+A[i*lda+j]*_x_buf_0;
          }
     }
}
#endif 
#include <atlas_prefetch.h>

#ifdef BETA1
#define SSE2
#include <SSE3Dnow.h>
#include <stdlib.h>
void ATL_dgemvT_a1_x1_b1_y1(const int M,const int N,const double alpha,const double* A,const int lda,const double* X,const int incX,const double beta,double* Y,const int incY) 
{
   int i,j;
   double _x_buf_0;
   double _a_buf_0_0;
   double _a_buf_1_0;
   double _y_buf_0;
   double _y_buf_1;
   size_t alignA;
   const double* _pA_0;
   const double* _pA_1;
   const double* _pA_0_0;
   const double* _pA_1_0;
   const double* _pX_0;
   double* _pY_0;
   const double * _prefA_0;
   const double * _prefA_0_0;
   _pA_0 = A;
   _pA_1 = _pA_0+lda;
   _pY_0 = Y;
   _prefA_0 = A+2*lda;
   for (i=0; i<-1+M; i+=2) 
     {
        vec_mov_mr_1(_pY_0,reg3);
        vec_mov_mr_1(1+_pY_0,reg4);
        alignA = (8 - (((size_t)(_pA_0)) & 0xF) / 8) ;
        for (j=0; j<alignA; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg0);
             vec_mov_mr_1(_pA_1+j,reg1);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
          }
        _pA_0_0 = _pA_0+alignA;
        _pA_1_0 = _pA_1+alignA;
        _pX_0 = X+alignA;
        _prefA_0_0 = _prefA_0;
        for (j=alignA; j<-7+N; j+=8) 
          {
             ATL_pfl1R(_prefA_0_0);
             _prefA_0_0 = 8+_prefA_0_0;
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mov_mr(_pA_1_0,reg1);
             vec_mov_mr(_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(2+_pA_0_0,reg0);
             vec_mov_mr(2+_pA_1_0,reg1);
             vec_mov_mr(2+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(2+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(4+_pA_0_0,reg0);
             vec_mov_mr(4+_pA_1_0,reg1);
             vec_mov_mr(4+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(4+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_a(6+_pA_0_0,reg0);
             vec_mov_mr(6+_pA_1_0,reg1);
             vec_mov_mr(6+_pX_0,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr(6+_pX_0,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
             _pA_0_0 = _pA_0_0+8;
             _pA_1_0 = _pA_1_0+8;
             _pX_0 = _pX_0+8;
          }
        for (j=j; j<N; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg0);
             vec_mov_mr_1(_pA_1+j,reg1);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg3);
             vec_mov_mr_1(X+j,reg2);
             vec_mul_rr(reg2,reg1);
             vec_add_rr(reg1,reg4);
          }
        vec_red(reg3,reg5);
        vec_mov_rm_1(reg3,_pY_0);
        vec_red(reg4,reg5);
        vec_mov_rm_1(reg4,1+_pY_0);
        _pA_0 = _pA_1+lda;
        _pA_1 = _pA_0+lda;
        _pY_0 = _pY_0+2;
        _prefA_0 = _prefA_0+2*lda;
     }
   for (i=i; i<M; i+=1) 
     {
        
        for (j=0; j<N; j+=1) 
          {
             _x_buf_0 = X[j];
             Y[i] = Y[i]+A[i*lda+j]*_x_buf_0;
          }
     }
}
#endif 
#include <atlas_prefetch.h>

#ifdef BETAX
#define SSE2
#include <SSE3Dnow.h>
#include <stdlib.h>
void ATL_dgemvT_a1_x1_bX_y1(const int M,const int N,const double alpha,const double* A,const int lda,const double* X,const int incX,const double beta,double* Y,const int incY) 
{
   int i,j;
   double _x_buf_0;
   double _a_buf_0_0;
   double _a_buf_1_0;
   double _y_buf_0;
   double _y_buf_1;
   size_t alignA;
   const double* _pA_0;
   const double* _pA_1;
   const double* _pA_0_0;
   const double* _pA_1_0;
   const double* _pX_0;
   double* _pY_0;
   const double * _prefA_0;
   const double * _prefA_0_0;
   _pA_0 = A;
   _pA_1 = _pA_0+lda;
   _pY_0 = Y;
   _prefA_0 = A+2*lda;
   for (i=0; i<-1+M; i+=2) 
     {
        vec_splat(&beta,reg0);
        vec_mov_mr_1(_pY_0,reg4);
        vec_mov_mr_1(1+_pY_0,reg5);
        vec_mul_rr(reg0,reg4);
        vec_mul_rr(reg0,reg5);
        alignA = (8 - (((size_t)(_pA_0)) & 0xF) / 8) ;
        for (j=0; j<alignA; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg1);
             vec_mov_mr_1(_pA_1+j,reg2);
             vec_mov_mr_1(X+j,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_1(X+j,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
          }
        _pA_0_0 = _pA_0+alignA;
        _pA_1_0 = _pA_1+alignA;
        _pX_0 = X+alignA;
        _prefA_0_0 = _prefA_0;
        for (j=alignA; j<-7+N; j+=8) 
          {
             ATL_pfl1R(_prefA_0_0);
             _prefA_0_0 = 8+_prefA_0_0;
             vec_mov_mr_a(_pA_0_0,reg1);
             vec_mov_mr(_pA_1_0,reg2);
             vec_mov_mr(_pX_0,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr(_pX_0,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
             vec_mov_mr_a(2+_pA_0_0,reg1);
             vec_mov_mr(2+_pA_1_0,reg2);
             vec_mov_mr(2+_pX_0,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr(2+_pX_0,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
             vec_mov_mr_a(4+_pA_0_0,reg1);
             vec_mov_mr(4+_pA_1_0,reg2);
             vec_mov_mr(4+_pX_0,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr(4+_pX_0,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
             vec_mov_mr_a(6+_pA_0_0,reg1);
             vec_mov_mr(6+_pA_1_0,reg2);
             vec_mov_mr(6+_pX_0,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr(6+_pX_0,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
             _pA_0_0 = _pA_0_0+8;
             _pA_1_0 = _pA_1_0+8;
             _pX_0 = _pX_0+8;
          }
        for (j=j; j<N; j+=1) 
          {
             vec_mov_mr_1(_pA_0+j,reg1);
             vec_mov_mr_1(_pA_1+j,reg2);
             vec_mov_mr_1(X+j,reg3);
             vec_mul_rr(reg3,reg1);
             vec_add_rr(reg1,reg4);
             vec_mov_mr_1(X+j,reg3);
             vec_mul_rr(reg3,reg2);
             vec_add_rr(reg2,reg5);
          }
        vec_red(reg4,reg6);
        vec_mov_rm_1(reg4,_pY_0);
        vec_red(reg5,reg6);
        vec_mov_rm_1(reg5,1+_pY_0);
        _pA_0 = _pA_1+lda;
        _pA_1 = _pA_0+lda;
        _pY_0 = _pY_0+2;
        _prefA_0 = _prefA_0+2*lda;
     }
   for (i=i; i<M; i+=1) 
     {
        Y[i] = beta*Y[i];
        for (j=0; j<N; j+=1) 
          {
             _x_buf_0 = X[j];
             Y[i] = Y[i]+A[i*lda+j]*_x_buf_0;
          }
     }
}
#endif 