include Cfront.code
include opt.pi

<parameter pre type="s"|"d" 
                  default="d" 
                  message="Whether to compute at single- or double- precision" /> 

<parameter yu type=1.._ 
                  default=4 
                  message="Unroll factors for loops that iterate over vectors y and x" /> 
<parameter xu type=1.._ 
                  default=2 
                  message="Unroll factors for loops that iterate over vectors y and x" /> 

<parameter SSELEN type=8|16 
                  default=8 
                  message="The length of SSE registers. Should be 8 for 32 bit machines and 16 for 64 bit machines" /> 
<parameter SSENO type=0|8|16 
                  default=8 
                  message="The number of SSE registers. Should be 8 for 32 bit Intel machines and 16 for 64 bit Intel machines" /> 
<parameter align type=0|1 
                  default=1 
                  message="Whether to align loops before SSE vectorization" /> 

<parameter PF type=0..4 
                  default=1 
                  message="Whether and how to apply prefetching optimization. 0: no prefetching; 1: prefetch A at next iteration of loop J; 2: prefetch Y at next iteration of loop I; 3: prefetch A at next iteration of loop I; 4: prefetch both X and A at iteration of loopI." /> 

<parameter permuteReg type=(INT,INT,INT,INT) 
                  parse=TUPLE("("INT","INT","INT","INT")")
                  default=(1,2,3,4)
                  message="permutation of integers (1,2,3,4) to control the ordering of scalar repl (for A,X,Y) and unrollJam (register level blocking); The original ordering is A_scalar->UnrollJam->X_scalar->Y_scalar" />

<parameter permuteUnroll type=(INT,INT) 
                  parse=TUPLE("("INT","INT")")
                  default=(1,2)
                  message="permutation of integers (1,2) to control the ordering of FiniteDifferencing and loop unrolling. The original ordering is FiniteDiff -> Unroll" />

<parameter threeAddress type=0..1 
                  default=1 
                  message="whether or not translate to three-address code" /> 

<parameter addressTranslate type=0..1 
                  default=0 
                  message="Turn on three address and two address translate" />

<trace gemvdef,gemv,gemvBody, gemvDecl,nest0,loop0,nest2,loopJ,nest1,loopI/>

<eval   ftype =(pre == "d") ? "double" : "float";
        alpha= 0;/>

<input to=gemvdef syntax="Cfront.code" >
#ifdef BETA/*@@*/__BETA/*@@*/ 

//@; BEGIN(gemv=FunctionDecl) 
void ATL_/*@pre@*/gemvN_a1_x1_b/*@@*/__BETA/*@@*/_y1(const int M, const int N, 
          const double alpha, const double *A, const int lda, 
          const double *X, const int incX, const double beta, 
          double *Y, const int incY) 			
{ 							
   int i, j;     					//@=>gemvDecl=Stmt
   for (i = 0; i < M; i += 1)				//@=>loop0=Loop BEGIN(nest0=Nest)
   {                                                    
     Y[i] = beta * Y[i];				//@ =>Stmt
   } 							
   for (j = 0; j < N; j += 1)		        	//@=>loopJ=Loop BEGIN(nest2=Nest)
   {                                                     
     for (i = 0; i < M; i += 1) 			//@=>loopI=Loop BEGIN(nest1=Nest) 
     { 							
         Y[i] += A[j*lda+i] * X[j];			//@ =>Stmt
      }      						
   } 							
}  							
#endif 

</input>


<eval gemvBody=gemv[FunctionDecl.body];
      lda ="lda";
       aj = "j"*lda;
       aij = aj+"i";
       Aij=ArrayAccess#("A", aij);
      paij=Bop#("+", "A", aij);
      paj = Bop#("+", "A", aj);
      alphaA=Aij;
      Yi = ArrayAccess#("Y", "i");
      pyi=Bop#("+","Y", "i");
      pxj= Bop#("+","X","j");
      Xj = ArrayAccess#("X", "j"); />

<eval specialize=DELAY {
   REPLACE("__BETA", beta, gemvdef) ;
   if (pre != "d") 
       REPLACE("double",ftype, gemvdef);
   if (beta == 0) nest0 = REBUILD(REPLACE("beta",0, nest0)); 
   else { if (beta == 1)  gemvBody=REBUILD(REPLACE(nest0,"",gemvBody)); }
}/>

<eval optimize =
    DELAY { 
            Xrepl = Yrepl = Arepl = ""; 
            APPLY {specialize}; 
          }
 
      PERMUTE(permuteReg, 
         DELAY { <* APPLY A_ScalarRepl; *>
            TRACE(Arepl,
              ScalarRepl[elem_type=ftype; trace_decl=gemvDecl; init_loc=nest1[Nest.body]; 
                         trace_repl=Arepl; trace=nest1]
                ( "a_buf",alphaA,
                 (CopyArrayDim#("i","i",loopI[Loop.step],1) CopyArrayDim#("j","j",loopJ[Loop.step],lda)),
                 nest1[Nest.body]));
           }

         DELAY { <*APPLY nest2_UnrollJam;*> 
           if (Xrepl != "") 
              PRINT ("Unroll-Jam is disabled because of X_ScalarRepl");
           else { 
            if (yu > 1) 
                UnrollJam[factor=yu; cleanup=1; trace=gemvBody](nest1,nest2);
            }
          }

         DELAY { <* APPLY X_ScalarRepl; *>
            TRACE(Xrepl,
               ScalarRepl[trace_repl=Xrepl; trace_decl=gemvDecl; elem_type=ftype; 
                      init_loc=nest2[Nest.body]; trace=nest2]
                 ( "x_buf",Xj,
                   CopyArrayDim#("j","j",loopJ[Loop.step],1), nest1[Nest.body]));
            }

         DELAY { <*APPLY Y_ScalarRepl; *>
            TRACE(Yrepl,
               ScalarRepl[init_loc=nest1[Nest.body];save_loc=nest1[Nest.body];
                   trace_decl=gemvDecl;elem_type=ftype;trace_repl=Yrepl; trace=nest1]
                 ("y_buf",Yi, 
                  CopyArrayDim#("i","i",loopI[Loop.step],1), nest1[Nest.body]));
            if (beta=="X")  
               ScalarRepl[init_loc=nest0[Nest.body]; save_loc=nest0[Nest.body]; 
                          trace=nest0]
                 ("y_buf",Yi, 
                   CopyArrayDim#("i","i",loopI[Loop.step],1), nest0[Nest.body]);
            if (beta==0) 
               ScalarRepl[save_loc=nest0[Nest.body]]
                   ("y_buf",Yi, 
                    CopyArrayDim#("i","i",loopI[Loop.step],1), nest0[Nest.body]);
           }
        )  <* end of permuteReg *>

      DELAY { <* APPLY array_ToPtrRef; Abuf_SplitStmt; SSE Vectorization*>
         if (threeAddress != 0) {
            ArrayAccess2PtrRef(gemvBody);
            if (Arepl){ 
               if(addressTranslate == 0){
		SplitStmt[iReuse=1; trace=nest1](Arepl, nest1[Nest.body]);
		} else {
			nvars = "";
			TRACE(nvars,SplitStmt[new=TRUE; trace_newVars=nvars; iReuse=1; trace=nest1](Arepl,nest1[Nest.body]));
			Arepl = BuildList(Arepl,nvars);
			PRINT(Arepl);
		}
	    }
            if (SSENO && SSELEN ) { <* APPLY body2_Vectorize; *>
               if (beta == "X")  
                 VectorizeCode[iReglen=SSELEN; iRegno=SSENO; elem_prec=pre; 
                               init_vars="beta"; trace=gemvBody; 
                               alignOpt=(align?("Y",pyi,"alignY"):"")]
                     ( (("beta",0) (Yrepl,1)), nest0, nest0);
               VectorizeCode[iReglen=SSELEN; iRegno=SSENO; elem_prec=pre; 
                            trace_decl=gemvDecl; trace_include=gemv; 
                            alignOpt=(align ? ("Y",pyi,"alignY") : "");
                            trace=nest2]
                 ( ( (Arepl,1) (Xrepl,0) (Yrepl,1) ), nest1, nest2[Nest.body]);
               }
            } 
          }

     PERMUTE(permuteUnroll, 
        DELAY { <* APPLY nest1_Unroll; *>
           factor=xu / loopI[Loop.step];
           if (factor > 1) {
              UnrollLoops[factor=factor; cleanup=1; trace=nest2](nest1[Nest.body],nest1) ;
              if (nest0 != "") {
                 factor=xu / loop0[Loop.step];
                 UnrollLoops[factor=factor; cleanup=1; trace=gemvBody]
                       (nest0[Nest.body],nest0) ;
                 }
              }
            }

        DELAY { <* APPLY array_FiniteDiff; *>
           FiniteDiff[exp_type="const " ftype "*"; trace_decl=gemvDecl]
              ( "pA", "A", (ExpDim#(nest2, loopJ[Loop.step], lda) ExpDim#(nest1,1,1)), gemvBody);

           FiniteDiff[exp_type="const " ftype "*"; trace_decl=gemvDecl]
              ( "pX", "X", ExpDim#(nest2, 1, 1), gemvBody);

           FiniteDiff[exp_type=ftype "*"; 
                  trace_decl=gemvDecl; trace=nest2]
               ("pY", "Y", ExpDim#(nest1, 1, 1), nest2[Nest.body]); 
       
           if (beta != 1) 
              FiniteDiff ("pY", "Y", ExpDim#(nest0, 1, 1), gemvBody);
           }
      ) <* end of permuteUnroll *>

     DELAY { <* APPLY body2_Prefetch; *>
        if (PF == 1) 
           Prefetch[trace_include=gemvdef; trace_decl=gemvDecl; elem_type="const " ftype " *"; var="prefA"] 
              ("A"+loopJ[Loop.step] * lda, 
                  ((nest2,nest2[Nest.body]) (nest1,nest1[Nest.body])), 
                  ( (loopJ[Loop.step]*lda) loopI[Loop.step]), gemvBody);
        if (PF == 2 || PF == 4) 
           Prefetch[trace_include=gemvdef; trace_decl=gemvDecl; elem_type="const " ftype " *"; var="prefY"] 
              ("Y"+loopI[Loop.step], 
                  (nest1,nest1[Nest.body]), (loopI[Loop.step]), gemvBody);
        if (PF == 3 || PF == 4) 
           Prefetch[trace_include=gemvdef; trace_decl=gemvDecl; elem_type="const " ftype " *"; var="prefA"] 
              ("A"+loopI[Loop.step], 
                  ((nest2,nest2[Nest.body]) (nest1,nest1[Nest.body])), 
                  ( (loopJ[Loop.step]*lda) loopI[Loop.step]), gemvBody);
       }
/>


<output to="orig.c" syntax="Cfront.code" from=( 
   INSERT (gemvdef,gemvdef);
   (
    beta=0; 
    SAVE gemvdef; 
    APPLY {specialize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
   (
    beta=1; 
    SAVE gemvdef; 
    APPLY {specialize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
   (
    beta="X"; 
    SAVE gemvdef; 
    APPLY {specialize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
) />

<output to="dgemv_kernel.c" syntax="Cfront.code" from=( 
   (
    beta=0; 
    SAVE gemvdef; 
    APPLY {optimize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
   (
    beta=1; 
    SAVE gemvdef; 
    APPLY {optimize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
   (
    beta="X"; 
    SAVE gemvdef; 
    APPLY {optimize};
    res = COPY gemvdef;
    RESTORE gemvdef;
    res 
   )
) />
