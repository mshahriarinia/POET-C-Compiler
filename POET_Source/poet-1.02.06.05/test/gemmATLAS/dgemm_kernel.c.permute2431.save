#include <atlas_prefetch.h>

#define SSE2
#include <SSE3Dnow.h>
#include <stdlib.h>
void ATL_USERMM(const int M,const int N,const int K,const double alpha,const double* A,const int lda,const double* B,const int ldb,const double beta,double* C,const int ldc) 
{
   int i,j,l;
   double _c_buf_0_0;
   double _a_buf_0_0;
   double _b_buf_0_0;
   const double* _pA_0;
   const double* _pA_0_0;
   const double* _pB_0;
   const double* _pB_0_0;
   double* _pC_0;
   double* _pC_0_0;
   const double* _prefA_0;
   _pB_0 = B;
   _pC_0 = C;
   _prefA_0 = 5184+A;
   for (j=0; j<72; j+=1) 
     {
        _pA_0 = A;
        _pC_0_0 = _pC_0;
        for (i=0; i<72; i+=1) 
          {
             ATL_pfl1R(_prefA_0);
             _prefA_0 = 1+_prefA_0;
             vec_splat(&beta,reg0);
             vec_mov_mr_1(_pC_0_0,reg1);
             vec_mul_rr(reg0,reg1);
             _pA_0_0 = _pA_0;
             _pB_0_0 = _pB_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_mov_mr_a(_pB_0_0,reg2);
             vec_mov_mr_a(_pA_0_0,reg0);
             vec_mul_rr(reg2,reg0);
             vec_add_rr(reg0,reg1);
             _pA_0_0 = 2+_pA_0_0;
             _pB_0_0 = 2+_pB_0_0;
             vec_red(reg1,reg3);
             vec_mov_rm_1(reg1,_pC_0_0);
             _pA_0 = _pA_0+72;
             _pC_0_0 = _pC_0_0+1;
          }
        _pB_0 = _pB_0+72;
        _pC_0 = _pC_0+ldc;
     }
}